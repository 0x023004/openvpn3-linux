#!/usr/bin/python3
#  OpenVPN 3 Linux client -- Next generation OpenVPN client
#
#  Copyright (C) 2017 - 2018  OpenVPN Inc. <sales@openvpn.net>
#  Copyright (C) 2017 - 2018  David Sommerseth <davids@openvpn.net>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as
#  published by the Free Software Foundation, version 3 of the
#  License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

##
# @file  openvpn2
#
# @brief This is an attempt to make a simplistic front-end user interface
#        for the OpenVPN 3 D-Bus based VPN client which feels more like the
#        well known and classic OpenVPN 2.x client.
#
#        Only client side options are supported, and only the features which
#        have been made available in the OpenVPN 3 Core library.

from enum import Enum
from getpass import getpass

import dbus
import os
import sys
import time

# Make all defined constants and classes part if this main module
from openvpn3 import StatusMajor, StatusMinor
from openvpn3 import ClientAttentionType, ClientAttentionGroup
from openvpn3 import ConfigParser
from openvpn3 import ConfigurationManager, Configuration
from openvpn3 import SessionManager, Session

# Add the traceback module if we're in debugging mode.
# This will allow dumping of tracebacks when exceptions happens
if 'OPENVPN3_DEBUG' in os.environ:
    import traceback


##
#  Simple wrapper to handle the raw_input() vs input() differences
#  between Python 2 and Python 3
def get_input_wrapper(prompt):
    if sys.version_info[0] < 3:
        # Python 2.x
        return raw_input(prompt)
    else:
        return input(prompt)



def import_config(bus, opts):
    cfgmgr = ConfigurationManager(bus)

    # Only preserver the imported configuration if we're debugging
    single_use = True
    if 'OPENVPN3_DEBUG' in os.environ:
        single_use = False

    cfgname = opts.GetConfigName();
    cfg = cfgmgr.Import(cfgname and cfgname or '(command line)', #name
                                   opts.GenerateConfig(),     # config_str
                                   single_use,                # single_use
                                   False)                     # persistent

    if opts.GetPersistTun() is True:
        # If --persist-tun was provided, set the persist_tun property
        # in the imported configuration
        cfg.SetProperty('persist_tun', True)

    if not single_use:
        print('Configuration path: %s' % cfg.GetPath())

    return cfg


def start_tunnel(bus, cfgobj, daemon):
    # Main session manager object
    sessmgr = SessionManager(bus)

    # Prepare the tunnel
    sessionobj = sessmgr.NewTunnel(cfgobj)

    #
    #  Starting the tunnel ...
    #
    done = False
    status = None
    exit_code = 0
    while done is False:
        try:
            # Check if the backend needs something more from us ...
            sessionobj.Ready()   # This throws an exception if not ready
            sessionobj.Connect() # Start the connection

            # Simple poll routine to catch the situation of the tunnel
            # The 'status' property in a session object contains the last status
            # update sent by the VPN backend
            connected = False
            connecting_prompt = False
            while done is False and connected is False:
                time.sleep(1)  # Don't race too quickly forward

                (status_maj, status_min, status_msg) = sessionobj.GetStatus()

                if StatusMajor.CONNECTION == status_maj:
                    if StatusMinor.CONN_CONNECTING == status_min:
                        if connecting_prompt is False:
                            sys.stdout.write('Connecting ...')
                            sys.stdout.flush()
                            connecting_prompt = True
                        else:
                            sys.stdout.write('.')
                            sys.stdout.flush()

                    elif StatusMinor.CONN_CONNECTED == status_min:
                        print('\nConnected')
                        connected = True
                        if daemon is False:
                            try:
                                # FIXME: Dump log entries and wait for CTRL-C or other signals
                                #   + listen for other signals from the session,
                                #   in case being disconnected/paused/resumed from a different user
                                input('Press enter to disconnect')
                                done = True
                            except:
                                print('\nDisconnecting ...')
                                done = True

                    elif status_min in (StatusMinor.CONN_DISCONNECTED,
                                        StatusMinor.CONN_DONE):
                        s  = len(status_msg) > 0 \
                            and status_msg or '(No information)'
                        print('\nConnection got disconnected: ' + s)
                        done = True

                    elif StatusMinor.CFG_REQUIRE_USER == status_min:
                        connected = False

                    elif StatusMinor.CONN_AUTH_FAILED == status_min:  # StatusMinor:CONN_AUTH_FAILED
                        print(' Authentication failed')
                        done = True
                        exit_code = 3

                    else:  # Not handled status codes
                        print('{Status: major=%s, minor=%s, message="%s"}' %
                              (status_maj.name, status_min.name, status_msg))
                        exit_code = 7

                if connected is False and done is False:
                    # Check if everything is okay.  If authentication
                    # failed, or a dynamic challenge is sent, then an
                    # exception is thrown again
                    sessionobj.Ready()


            # If we're not running in the background
            if daemon is False:
                if connected is True:
                    # If connected, retrieve and dump the last connection
                    # statistics
                    print(sessionobj.GetFormattedStatistics())

                # ... and complete the disconnect, which shuts down the backend
                sessionobj.Disconnect()
                print('Disconnected')

            else:  # If we are running in the background ...
                if connected:
                    # ... and we're connected, print important details
                    print('Running connection in the background.  To manage '
                          + 'this connection, use')
                    print('the openvpn3 command line tool with the session '
                          +'path below:')
                    print('>>> Session path: ' + sessionobj.GetPath())
            done = True

        except dbus.exceptions.DBusException as excep:
            # Do we need provide user credentials?
            if str(excep).find(' Missing user credentials') > 0:
                print('Credentials needed')

                # User credentials comes in tuples of (type, group).
                # Type should always be 1 - that is the type for user credentials.
                for input_slot in sessionobj.FetchUserInputSlots():

                    # Skip non-user credentials requests
                    if input_slot.GetTypeGroup()[0] != ClientAttentionType.CREDENTIALS:
                        continue

                    try:
                        if False == input_slot.GetInputMask():
                            response = get_input_wrapper(input_slot.GetLabel() + ': ')
                        else:
                            response = getpass(input_slot.GetLabel() + ': ')
                    except KeyboardInterrupt:
                        # Shutdown the backend client
                        print("\nAborting")
                        sessionobj.Disconnect()
                        return 8

                    input_slot.ProvideInput(response)

            elif str(excep).find(' Backend VPN process have died') > 1:
                if 3 == exit_code:  # Authentication failed, this is expected
                    break
                if 'OPENVPN3_DEBUG' in os.environ:
                    print ('\nstart_tunnel() [1] traceback:\n')
                    print (traceback.format_exc())
                raise Exception('VPN backend process stopped unexpectedly. '
                                +'Session has closed. :: ' + str(excep))
            elif str(excep).find('Backend VPN process is starting') > 1:
                # Wait for the backend to settle
                time.sleep(0.5)
            else:
                if 'OPENVPN3_DEBUG' in os.environ:
                    print ('\nstart_tunnel() [2] traceback:\n')
                    print (traceback.format_exc())
                # Other exceptions are re-thrown
                raise excep
        except KeyboardInterrupt:
            if connected is True:
                # If connected, retrieve and dump the last connection
                # statistics
                print(sessionobj.GetFormattedStatistics())
            print("\nClosing session")
            sessionobj.Disconnect()

    return exit_code



def openvpn2_main(args):
    ret = 9
    try:
        if len(args) < 2:
            raise Exception('No options provided.  See "%s --help" for details.' %
                            args[0])

        # Simulate the classic OpenVPN 2.x behaviour where it can take a
        # single file name as the argument, which is the config file name
        if len(args) == 2 and '--' != args[1][0:2]:
            args.insert(1, '--config')

        # Parse provided provided on the command line
        opts = ConfigParser(args, 'OpenVPN 2.x wrapper for OpenVPN 3')
        opts.SanityCheck()
        if 'OPENVPN3_DEBUG' in os.environ and 'DUMP_PARSE' == os.environ['OPENVPN3_DEBUG']:
            print (opts.GenerateConfig())
            return 0

        # Get a connection to the D-Bus' system bus
        bus = dbus.SystemBus()

        # Import the configuration, which is stored in the configuration manager
        cfgobj = import_config(bus, opts)

        # Start the tunnel, which his managed by the session manager
        ret = start_tunnel(bus, cfgobj, opts.GetDaemon())

    except KeyboardInterrupt:
        print("")
        ret = 8
    except Exception as e:
        print ('\n** ERROR ** %s' % str(e))
        ret = 2

        if 'OPENVPN3_DEBUG' in os.environ:
            print ('\nmain traceback:')
            print (traceback.format_exc())

    return ret



if __name__ == "__main__":
    sys.exit(openvpn2_main(sys.argv))